[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

# -----------------------------------------------
# Package infos

[project]
name = "tao"
description = "TAO application publisher API/CLI"
authors = [
    { name = "ClÃ©ment GUICHARD", email = "clement.guichard@csgroup.eu" },
]
readme = "README.md"
requires-python = ">=3.8"
keywords = ["python", "api", "cli", "tao", "dunia", "cs-group"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "click~=8.1",
    "pydantic~=2.4",
    "PyYAML~=6.0",
    "requests~=2.31",
    "rich~=13.5",
    "typing-extensions~=4.8",
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://gitlab.si.c-s.fr/space_platforms/dunia/tao-publisher"
"Source" = "https://gitlab.si.c-s.fr/space_platforms/dunia/tao-publisher"
"Bug Tracker" = "https://gitlab.si.c-s.fr/space_platforms/dunia/tao-publisher/issues"

[project.optional-dependencies]
dev = [
    "build~=1.0",
    "commitizen==3.10.0",
    "hatch~=1.7",
    "pre-commit~=3.4",
    "ruff==0.0.291",
    "tox~=4.11",
    "bpython==0.24",
]
test = [
    "pytest-cov~=4.1",
    "pytest-html~=4.0",
    "pytest-sugar~=0.9",
    "pytest~=7.4",
]
lint = [
    "black~=23.9",
    "mypy~=1.5",
    "ruff==0.0.291",
    # Stubs
    "types-PyYAML~=6.0",
    "types-requests~=2.31",
]
docs = [
    "markdown-include~=0.8",
    "mkdocs-click~=0.8",
    "mkdocs-material~=9.4",
    "mkdocstrings[python]~=0.23",
    "mkdocs~=1.5",
]
security = [
    "safety~=2.3",
]

[project.scripts]
tao = "tao.cli:main"

# -----------------------------------------------
# Build & Packaging

[tool.hatch.build]
only-packages = true
skip-excluded-dirs = true

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
source = "vcs"
fallback-version = "0.1.0"

[tool.hatch.version.raw-options]
version_scheme = "python-simplified-semver"
local_scheme = "no-local-version"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"

# -----------------------------------------------
# Tests

[tool.pytest.ini_options]
minversion = "7.4"
required_plugins = [
    "pytest-cov",
    "pytest-html",
]
testpaths = [
    "src",
    "tests",
]
addopts = [
    "--show-capture=no",
    "--doctest-modules",
    # pytest-cov
    "--cov=src",
    "--cov-config=pyproject.toml",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    # pytest-html
    "--html=tests-reports/index.html",
    "--self-contained-html",
]

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "tests/*",
]

[tool.coverage.report]
fail_under = 90
exclude_lines = [
    "pragma: no cover",
    "def __str__",
    "def __repr__",
    "if self.debug",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.coverage.html]
directory = "tests-reports/coverage"

[tool.coverage.xml]
output = "tests-reports/coverage.xml"

# -----------------------------------------------
# Linters

[tool.black]
line-length = 88

[tool.mypy]
strict = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true

[tool.ruff]
required-version = "0.0.291"
target-version = "py38"
respect-gitignore = true
force-exclude = true
extend-exclude = ["tests"]
select = [
    "F", # PyFlakes
    "E", "W", # pycodestyle
    "I", # isort
    "D", # pydocstyle
    "UP", # pyupgrade
    "ERA", # eradicate
    "PL", # Pylint
    "TRY", # tryceratops
    "PERF", # Perflint
    "RUF", # Ruff
    # flake8-* plugins
    "A", "ANN", "ARG", "ASYNC", "B", "BLE", "C4", "C90", "COM", "DTZ", "EM", "EXE", "G",
    "INP", "ISC", "N", "PIE", "PT", "PGH", "PTH", "PYI", "Q", "RET", "RSE", "S", "SIM",
    "SLF", "SLOT", "T20", "TCH", "TD", "TID", "YTT",
]
ignore = ["ANN101", "ANN102", "D105", "D107", "D203", "D213", "D301", "E501", "G004", "RET504", "TD002", "TD003"]
fix = true
unfixable = ["RUF005", "RUF100"]
line-length = 88

[tool.ruff.per-file-ignores]
"__init__.py" = ["D104", "E402", "F401"]
"__main__.py" = ["T201"]
"cli.py" = ["TRY400"]

[tool.ruff.pylint]
max-args = 10

[tool.ruff.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pycodestyle]
max-doc-length = 100

[tool.ruff.pydocstyle]
convention = "pep257"
